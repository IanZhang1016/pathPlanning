//OPEN-->CLOSE，Initial point-->Any point-->rendezvous point
closedset := the empty set                 //Have passed point  
    openset := set containing the initial node //Pointns that the algorithm maybe will pass
    g_score[start] := 0                        //g(n)
    h_score[start] := heuristic_estimate_of_distance(start, goal)    //h(n)
    f_score[start] := h_score[start]     
      
    while openset is not empty    //If openset is not empty
        x := the node in openset having the lowest f_score[] value //x is the smallest point in the openset
        if x = goal                                               //if x is rendezvous point
            return reconstruct_path(came_from,goal)             //
        remove x from openset
        add x to closedset                            //add x to colsedset

CLSOE SET
        for each y in neighbor_nodes(x)   //neighbor point do not exist other things like people
            if y in closedset
                continue
            tentative_g_score := g_score[x] + dist_between(x,y)

            if y not in openset
                add y to openset
                tentative_is_better := true
            else if tentative_g_score < g_score[y]
                tentative_is_better := true
            else
                tentative_is_better := false
            if tentative_is_better = true
                came_from[y] := x
                g_score[y] := tentative_g_score
                h_score[y] := heuristic_estimate_of_distance(y, goal)  //x-->y-->goal
                f_score[y] := g_score[y] + h_score[y]
    return failure

function reconstruct_path(came_from,current_node)
    if came_from[current_node] is set
        p = reconstruct_path(came_from,came_from[current_node])
        return (p + current_node)
    else
        return the empty path 